package main

import (
	"fmt"
	"gin_boot/internal/utils"
	"go/ast"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func main() {
	controller_set()
	service_set()
	dao_set()
	router_file_set()
}

func controller_set() {
	// 获取项目根目录
	rootDir, _ := os.Getwd()
	pkgPath := filepath.Join(rootDir, "internal", "controller")
	outPath := filepath.Join(rootDir, "internal", "ioc", "wire_set_controller.go")

	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, pkgPath, nil, parser.ParseComments)
	if err != nil {
		panic(fmt.Sprintf("无法解析控制器包: %v", err))
	}

	var controllers []string
	for _, pkg := range pkgs {
		for _, file := range pkg.Files {
			for _, decl := range file.Decls {
				if fn, ok := decl.(*ast.FuncDecl); ok {
					if strings.HasPrefix(fn.Name.Name, "New") && strings.HasSuffix(fn.Name.Name, "Controller") {
						controllers = append(controllers, "controller."+fn.Name.Name)
					}
				}
			}
		}
	}

	// 生成 wire.go 文件
	code := `// Code generated by gencontrollers; DO NOT EDIT.
package ioc

import (
    "gin_boot/internal/controller"
    "github.com/google/wire"
)

// ControllerSet 是所有 Controller 构造函数的集合
var ControllerSet = wire.NewSet(
    ` + strings.Join(controllers, ",\n    ") + `,
)
`
	err = ioutil.WriteFile(outPath, []byte(code), 0644)
	if err != nil {
		panic(fmt.Sprintf("Failed to write wire.go: %v", err))
	}
	log.Println("✅ ControllerSet 已自动生成到 " + outPath)
}

func service_set() {
	// 获取项目根目录
	rootDir, _ := os.Getwd()
	pkgPath := filepath.Join(rootDir, "internal", "service")
	outPath := filepath.Join(rootDir, "internal", "ioc", "wire_set_service.go")
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, pkgPath, nil, parser.ParseComments)
	if err != nil {
		panic(fmt.Sprintf("无法解析service包: %v", err))
	}

	var controllers []string
	for _, pkg := range pkgs {
		for _, file := range pkg.Files {
			for _, decl := range file.Decls {
				if fn, ok := decl.(*ast.FuncDecl); ok {
					if strings.HasPrefix(fn.Name.Name, "New") && strings.HasSuffix(fn.Name.Name, "Service") {
						controllers = append(controllers, "service."+fn.Name.Name)
					}
				}
			}
		}
	}

	// 生成 wire.go 文件
	code := `// Code generated by gencontrollers; DO NOT EDIT.
package ioc

import (
    "gin_boot/internal/service"
    "github.com/google/wire"
)

// ServiceSet 是所有 Service 构造函数的集合
var ServiceSet = wire.NewSet(
    ` + strings.Join(controllers, ",\n    ") + `,
)
`
	err = ioutil.WriteFile(outPath, []byte(code), 0644)
	if err != nil {
		panic(fmt.Sprintf("Failed to write wire.go: %v", err))
	}
	log.Println("✅ ServiceSet 已自动生成到 " + outPath)
}

func dao_set() {
	// 获取项目根目录
	rootDir, _ := os.Getwd()
	pkgPath := filepath.Join(rootDir, "internal", "dao")
	outPath := filepath.Join(rootDir, "internal", "ioc", "wire_set_dao.go")

	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, pkgPath, nil, parser.ParseComments)
	if err != nil {
		panic(fmt.Sprintf("无法解析dao包: %v", err))
	}

	var controllers []string
	for _, pkg := range pkgs {
		for _, file := range pkg.Files {
			for _, decl := range file.Decls {
				if fn, ok := decl.(*ast.FuncDecl); ok {
					if strings.HasPrefix(fn.Name.Name, "New") && strings.HasSuffix(fn.Name.Name, "Dao") {
						controllers = append(controllers, "dao."+fn.Name.Name)
					}
				}
			}
		}
	}

	// 生成 wire.go 文件
	code := `// Code generated by gendaos; DO NOT EDIT.
package ioc

import (
    "gin_boot/internal/dao"
    "github.com/google/wire"
)

// DaoSet 是所有 DAO 构造函数的集合（ProviderSet）
var DaoSet = wire.NewSet(
    ` + strings.Join(controllers, ",\n    ") + `,
)
`
	err = ioutil.WriteFile(outPath, []byte(code), 0644)
	if err != nil {
		panic(fmt.Sprintf("Failed to write wire.go: %v", err))
	}
	log.Println("✅ DaoSet 已自动生成到 " + outPath)
}

// ControllerInfo 存储控制器信息
type ControllerInfo struct {
	TypeName     string // 控制器类型名（如 UserController）
	VariableName string // 变量名（如 userController）
}

// scanControllers 扫描 internal/controller 目录，查找控制器结构体
func scanControllers(controllerDir string) ([]ControllerInfo, error) {
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, controllerDir, nil, 0)
	if err != nil {
		return nil, fmt.Errorf("failed to parse directory: %v", err)
	}

	var controllers []ControllerInfo
	for _, pkg := range pkgs {
		for _, file := range pkg.Files {
			for _, decl := range file.Decls {
				genDecl, ok := decl.(*ast.GenDecl)
				if !ok || genDecl.Tok != token.TYPE {
					continue
				}
				for _, spec := range genDecl.Specs {
					typeSpec, ok := spec.(*ast.TypeSpec)
					if !ok {
						continue
					}
					// 假设控制器以 "Controller" 或类似命名结尾
					//if strings.HasSuffix(typeSpec.Name.Name, "Controller") || typeSpec.Name.Name == "Captcha" {
					varName := utils.FirstLower(typeSpec.Name.Name)
					controllers = append(controllers, ControllerInfo{
						TypeName:     typeSpec.Name.Name,
						VariableName: varName,
					})
					//}
				}
			}
		}
	}
	return controllers, nil
}

// router_file_set 生成 internal/router/router.go
func router_file_set() {
	rootDir, err := os.Getwd()
	routerFile := filepath.Join(rootDir, "internal", "router", "router.go")
	controllerDir := filepath.Join(rootDir, "internal", "controller")
	controllers, err := scanControllers(controllerDir)
	if err != nil {
		fmt.Println("控制器获取失败，", err)
	}

	tmpl := `package router

import (
	"gin_boot/internal/controller"
	"gin_boot/internal/router/routers"
)

func NewAllHandlers(
	{{- range .Controllers }}
	{{ .VariableName }} *controller.{{ .TypeName }},
	{{- end }}
) []routers.RouteRegistrar {
	return []routers.RouteRegistrar{
		{{- range .Controllers }}
		{{ .VariableName }},
		{{- end }}
	}
}
`
	data := struct{ Controllers []ControllerInfo }{
		Controllers: controllers,
	}

	t, err := template.New("router").Parse(tmpl)
	if err != nil {
		panic(fmt.Sprintf("Failed to parse template: %v", err))
	}

	f, err := os.Create(routerFile)
	if err != nil {
		panic(fmt.Sprintf("Failed to create router.go: %v", err))
	}
	defer f.Close()

	if err := t.Execute(f, data); err != nil {
		panic(fmt.Sprintf("Failed to execute template: %v", err))
	}

	log.Println("✅ router 生成成功")
}
